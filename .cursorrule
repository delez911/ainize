# AINize 碳硅自主协同网络科技有限责任公司 - 技术框架规范

## 技术栈
- 前端：HTML5, CSS3, JavaScript
- 后端：Node.js
- 模板引擎：HTML (vite-plugin-html)
- 构建工具：Vite
- 样式管理：
  - Tailwind CSS (v3.3.5)
  - PostCSS (v8.4.35)
  - Autoprefixer (v10.4.16)
  - CSS Modules
- 代码质量：
  - ESLint (v8.56.0)
- 版本控制：Git

## 十、HTML 入口与样式管理规范

### 1. 多入口 HTML 配置
- 每个页面入口（如 index.html、techco_claude.html、techco_gemini.html 等）均需在 `vite.config.js` 中单独配置 `createHtmlPlugin`，并继续采用 EJS 语法进行模板渲染。
- 推荐配置方式示例（伪代码）：
  ```js
  createHtmlPlugin({
    entry: 'src/main.js',
    template: 'index.html',
    inject: { data: { title: '首页' } }
  }),
  createHtmlPlugin({
    entry: 'src/claude.js',
    template: 'techco_claude.html',
    inject: { data: { title: 'Claude 合作' } }
  }),
  // 其他入口同理
```
- `index.html`：主页面模板，动态内容由 vite-plugin-html 处理
- `src/components/`：页面结构化内容，按业务模块拆分
- `src/styles/`：所有样式文件，按功能细分
- `utils/htmlLoader.js`：负责加载 HTML 组件

## 四、代码风格
- 文件命名：全部小写，单词间用连字符（-）
- 变量命名：JS 使用 camelCase，CSS 使用 kebab-case
- 组件开发：单一职责原则，每个组件只做一件事
- 代码规范：严格遵循 ESLint 规则
- 提交规范：Conventional Commits 格式

## 项目结构
```
static-site/
├── app.js                 # 应用入口，Express服务器配置
├── package.json           # 项目依赖和脚本配置
├── vite.config.js         # Vite构建配置
├── index.html             # 主页面模板
├── public/                # 静态资源目录
├── src/
│   ├── styles/           # 样式文件
│   │   ├── base.css     # 基础样式
│   │   ├── header.css   # 头部样式
│   │   ├── components.css # 组件样式
│   │   ├── dao.css      # DAO相关样式
│   │   ├── market.css   # 市场相关样式
│   │   ├── timeline.css # 时间线样式
│   │   └── main.css     # 样式入口文件
│   └── components/       # 组件目录
│       ├── overview/     # 公司概述
│       ├── market/       # 市场机会
│       ├── business/     # 商业模式
│       ├── structure/    # 公司结构
│       ├── technology/   # 技术架构
│       └── development/  # 发展规划
├── utils/                # 工具函数
│   └── htmlLoader.js     # HTML文件加载器
└── views/                # 视图模板
```

## 文件职责

### 核心文件
- `app.js`: Express应用入口，配置路由和中间件
- `package.json`: 项目依赖和脚本管理
- `vite.config.js`: Vite构建工具配置
- `index.html`: 主页面模板，使用 vite-plugin-html 处理动态内容

### 组件文件
1. `overview/overview.html`: 公司概述
   - 公司简介
   - 核心特点
   - 组织架构
   - 智能合约矩阵

2. `market/market.html`: 市场机会
   - 市场分析
   - 竞争对手
   - 市场趋势
   - 目标客户

3. `business/business.html`: 商业模式
   - 价值主张
   - 收入模式
   - 成本结构
   - 盈利模式

4. `structure/structure.html`: 公司结构
   - 组织架构
   - 利益相关者
   - 治理机制
   - 决策流程

5. `technology/technology.html`: 技术架构
   - 核心技术组件
   - 技术创新
   - 硅工Card系统
   - 技术路线图

6. `development/development.html`: 发展规划
   - 发展目标
   - 实施计划
   - 里程碑
   - 风险评估

### 工具文件
- `utils/htmlLoader.js`: 负责加载HTML组件文件

### 样式文件
- `styles/base.css`: 基础样式和变量定义
- `styles/header.css`: 头部导航样式
- `styles/components.css`: 通用组件样式
- `styles/dao.css`: DAO相关组件样式
- `styles/market.css`: 市场相关组件样式
- `styles/timeline.css`: 时间线组件样式
- `styles/main.css`: 样式入口文件，整合所有样式

## 开发规范
1. 文件命名：使用小写字母，单词间用连字符(-)连接
2. 代码风格：遵循ESLint规范
3. 组件开发：保持单一职责原则
4. 样式管理：使用CSS Modules避免样式冲突
5. 提交规范：遵循Conventional Commits规范

## 构建流程
1. 开发环境：`npm run dev`
2. 生产构建：`npm run build`
3. 代码检查：`npm run lint`
4. 样式编译：`npm run style`

## 部署要求
1. Node.js >= 14.0.0
2. npm >= 6.0.0
3. 支持ES6的现代浏览器 